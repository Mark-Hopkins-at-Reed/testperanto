{
    "distributions": [
        {"name": "count", "type": "uniform", "domain": ["sng", "plu"]},
        {"name": "def", "type": "uniform", "domain": ["def", "indef"]}
    ],
    "rules": [
        {"rule": "($qstart $x1) -> ($qevent $x1)"},
        {"rule": "($qevent (EVENT (inst $x1) (args (arg1 $x2)) $x4 $x5)) -> (S ($qarg0 $x2) ($qvb $x1 $x5) ($qvmods $x4))"},
        {"rule": "($qevent (EVENT (inst $x1) (args (arg0 $x2) (arg1 $x3)) $x4 $x5)) -> (S ($qarg0 $x2) ($qvb $x1 $x5) ($qarg1 $x3) ($qvmods $x4))"},
        {"rule": "($qccomp (EVENT (inst $x1) (args (arg1 $x2)) $x4 $x5)) -> (S ($qvbinf $x1 $x5) ($qarg1 $x2) ($qvmods $x4))"},
        {"rule": "($qrcevent (EVENT (inst $x1) (args (arg1 $x2)) $x4 $x5)) -> (S ($qvb $x1 $x5) ($qarg1 $x2) ($qvmods $x4))"},
        {"rule": "($qsubclause (EVENT (inst cause.0) (args (arg0 $x1)) $x2 $x3)) -> (S because ($qevent $x1))"},
        {"rule": "($qarg0 (ENTITY $x1 $x2 $x3)) -> ($qentity (ENTITY $x1 $x2 $x3))"},
        {"rule": "($qarg0 (EVENT $x1 $x2 $x3 $x4)) -> ($qccomp (EVENT $x1 $x2 $x3 $x4))"},
        {"rule": "($qarg1 (ENTITY $x1 $x2 $x3)) -> ($qentity (ENTITY $x1 $x2 $x3))"},
        {"rule": "($qarg1 (EVENT $x1 $x2 $x3 $x4)) -> ($qccomp (EVENT $x1 $x2 $x3 $x4))"},
        {"rule": "($qentity (ENTITY (inst $x1) $x2 $x3)) -> (NP ($qdt $x3) ($qnn $x1 $x3) ($qnmods $x2))"},
        {"rule": "($qdt (props (count $x1) (def def))) -> (DT the)"},
        {"rule": "($qdt (props (count sng) (def indef))) -> (DT a)"},
        {"rule": "($qdt (props (count plu) (def indef))) -> (DT *eps*)"},
        {"rule": "($qnn $x1 (props (count $x2) (def $x3))) -> (NN (@nn (STEM $x1) (PERSON 3) (COUNT $x2)))"},
        {"rule": "($qnmods -null-) -> (MOD *eps*)"},
        {"rule": "($qnmods (mods (arg0-of $x1))) -> (RC that ($qrcevent $x1))"},
        {"rule": "($qvb vb.$y1 (props (tense $x1) (voice $x2) (count $x3))) -> (VB (@vb (STEM vb.$y1) (PERSON 3) (COUNT $x3) (POLARITY pos) (TENSE $x1) (VOICE $x2)))"},
        {"rule": "($qvbinf vb.$y1 (props (tense $x1) (voice $x2) (count $x3))) -> ($qvb vb.$y1 (props (tense $x1) (voice $x2) (count inf)))"},
        {"rule": "($qvmods -null-) -> (MOD *eps*)"},
        {"rule": "($qvmods (mods (location $x1))) -> (PP in ($qentity $x1))"},
        {"rule": "($qvmods (mods (time $x1))) -> (PP for ($qentity $x1))"},
        {"rule": "($qvmods (mods (arg1-of $x1))) -> ($qsubclause $x1)"}
    ]
}
