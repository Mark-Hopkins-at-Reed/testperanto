{
    "distributions": [
        {"name": "count", "type": "uniform", "domain": ["sng", "plu"]},
        {"name": "def", "type": "uniform", "domain": ["def", "indef"]}
    ],
    "rules": [
        {"rule": "($qstart $x1) -> ($qevent $x1)"},
        {"rule": "($qevent (EVENT (inst $x1) (args (arg0 (EVENT $x2 $x5 $x6)) $x3) $x4)) -> ($qevent_mods_tbd.sng $x4 (S (arg0 (EVENT $x2 $x5 $x6)) $x1 $x3))"},
        {"rule": "($qevent (EVENT (inst $x1) (args (arg0 (ENTITY $x2 $x5)) $x3) $x4)) -> ($qevent_mods_tbd.$z1 $x4 (S (arg0 (ENTITY $x2 $x5)) $x1 $x3))", "zdists": ["count"]},
        {"rule": "($qevent (EVENT-PASSIVE (inst $x1) (args (arg1 (EVENT $x2 $x5 $x6))) $x3)) -> ($qevent_mods_tbd.sng $x3 (S-PASSIVE (arg0 (EVENT $x2 $x5 $x6)) $x1))"},
        {"rule": "($qevent (EVENT-PASSIVE (inst $x1) (args (arg1 (ENTITY $x2 $x5))) $x3)) -> ($qevent_mods_tbd.$z1 $x3 (S-PASSIVE (arg0 (ENTITY $x2 $x5)) $x1))", "zdists": ["count"]},
        {"rule": "($qevent_mods_tbd.$y1 (mods -null-) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (polarity -)) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1.neg $x3))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (location $x1)) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3) (PP in ($qentity.$z1 $x1)))", "zdists": ["count"]},
        {"rule": "($qevent_mods_tbd.$y1 (mods (time $x1)) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3)))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (condition $x1)) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3) if ($qevent $x1))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (arg1-of $x1)) (S-PASSIVE $x2 $x3)) -> (S ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3) ($qsubclause $x1))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (arg1-of $x1)) (S-PASSIVE $x2 $x3)) -> (S ($qsubclause $x1) , ($qarg0.$y1 $x2) ($qvbpass.$y1 $x3))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods -null-) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvb.$y1 $x3) ($qarg1 $x4))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (polarity -)) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvb.$y1.neg $x3) ($qarg1 $x4))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (location $x1)) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvb.$y1 $x3) ($qarg1 $x4) (PP in ($qentity.$z1 $x1)))", "zdists": ["count"]},
        {"rule": "($qevent_mods_tbd.$y1 (mods (time $x1)) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvb.$y1 $x3) ($qarg1 $x4))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (condition $x1)) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvbcond.$y1 $x3) ($qarg1 $x4) if ($qevent $x1))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (arg1-of $x1)) (S $x2 $x3 $x4)) -> (S ($qarg0.$y1 $x2) ($qvb.$y1 $x3) ($qarg1 $x4) ($qsubclause $x1))"},
        {"rule": "($qevent_mods_tbd.$y1 (mods (arg1-of $x1)) (S $x2 $x3 $x4)) -> (S ($qsubclause $x1) , ($qarg0.$y1 $x2) ($qvb.$y1 $x3) ($qarg1 $x4))"},
        {"rule": "($qccomp (EVENT (inst $x1) (args (arg1 $x2)) (mods $x3))) -> (S ($qvbinf $x1) ($qarg1 (arg1 $x2)))"},
        {"rule": "($qrcevent.$y1 (EVENT (inst $x1) (args (arg1 $x2)) (mods $x3))) -> (S ($qvb.$y1 $x1) ($qarg1 (arg1 $x2)))"},
        {"rule": "($qsubclause (EVENT (inst cause.0) (args (arg0 $x1)) (mods -null-))) -> (S because ($qevent $x1))"},
        {"rule": "($qentity.$y1 (ENTITY (inst $x1) $x2)) -> ($qnp.$y1 $x1 $x2)"},
        {"rule": "($qarg0.$y1 (arg0 (ENTITY $x1 $x2))) -> ($qentity.$y1 (ENTITY $x1 $x2))"},
        {"rule": "($qarg0.$y1 (arg0 (EVENT $x1 $x2 $x3))) -> ($qccomp (EVENT $x1 $x2 $x3))"},
        {"rule": "($qarg1 (arg1 (ENTITY $x1 $x2))) -> ($qentity.$z1 (ENTITY $x1 $x2))", "zdists": ["count"]},
        {"rule": "($qarg1 (arg1 (EVENT $x1 $x2 $x3))) -> ($qccomp (EVENT $x1 $x2 $x3))"},
        {"rule": "($qvbinf vb.$y1) -> (VP (TO to) (VB (@vb (STEM vb.$y1) (PERSON 1) (COUNT sng) (POLARITY pos) (TENSE present))))"},
        {"rule": "($qvbcond.$y1 vb.$y2) -> (VB (@vb (STEM vb.$y2) (PERSON 3) (COUNT $y1) (POLARITY pos) $qtense (CONDITIONAL yes)))"},
        {"rule": "($qvbpass.$y1 vb.$y2) -> (VB (@vb (STEM vb.$y2) (PERSON 3) (COUNT $y1) (POLARITY pos) (TENSE passive)))"},
        {"rule": "($qvb.$y1 vb.$y2) -> (VB (@vb (STEM vb.$y2) (PERSON 3) (COUNT $y1) (POLARITY pos) $qtense))"},
        {"rule": "($qvb.$y1.$y3 vb.$y2) -> (VB (@vb (STEM vb.$y2) (PERSON 3) (COUNT $y1) (POLARITY $y3) $qtense))"},
        {"rule": "($qnp.$y1 nn.$y2 $x1) -> (NP $qdt.$y1.$z1 $qnn.$y1.$y2 ($qnmods.$y1 $x1))", "zdists": ["def"] },
        {"rule": "($qnp.$y1 nn.$y2) -> (NP $qdt.$y1.$z1 $qnn.$y1.$y2)", "zdists": ["def"] },
        {"rule": "$qnn.$y1.$y2 -> (NN (@nn (STEM nn.$y2) (PERSON 3) (COUNT $y1)))"},
        {"rule": "($qvmods (mods -null-)) -> (MOD *eps*)"},
        {"rule": "($qvmods (mods (polarity -))) -> (MOD did not)"},
        {"rule": "($qvmods (mods (location $x1))) -> (PP in ($qentity.$z1 $x1))", "zdists": ["count"]},
        {"rule": "($qvmods (mods (time $x1))) -> (PP in ($qentity.$z1 $x1))", "zdists": ["count"]},
        {"rule": "($qvmods (mods (arg1-of $x1))) -> ($qsubclause $x1)", "zdists": ["count"]},
        {"rule": "($qnmods.$y1 (mods -null-)) -> (MOD *eps*)"},
        {"rule": "($qnmods.$y1 (mods (arg0-of $x1))) -> (RC that ($qrcevent.$y1 $x1))"},
        {"rule": "$qdt.$y1.def -> (DT the)"},
        {"rule": "$qdt.sng.indef -> (DT a)"},
        {"rule": "$qdt.plu.indef -> (DT *eps*)"},
        {"rule": "$qtense -> (TENSE perfect)"},
        {"rule": "$qtense -> (TENSE present)"},
        {"rule": "$qtense -> (TENSE future)"},
        {"rule": "$qtense -> (TENSE past)"}

    ]
}
